{"version":3,"sources":["assets/mine.svg","enums.js","redux/actions.js","components/Navbar.js","appconfig.js","components/NewGame.js","components/Menu.js","components/Message.js","components/Cell.js","components/GameField.js","components/Minimap.js","shared/viewport.helpers.js","components/Viewport.js","App.js","serviceWorker.js","redux/selectors.js","sagas/toggleFlagSaga.js","shared/field.helpers.js","sagas/generateFieldSaga.js","sagas/changeOffsetSaga.js","sagas/openCellSaga.js","redux/store.js","index.js"],"names":["module","exports","actionType","gameStage","NOT_STARTED","STARTED","WON","LOST","toggleMenu","show","type","payload","moveViewport","dx","dy","setMessage","visible","severity","title","content","setField","field","changeSetFlags","delta","setGameStage","stage","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","timer","flagCounter","flagIcon","color","connect","dispatch","classes","AppBar","position","Toolbar","IconButton","edge","className","aria-label","onClick","actions","Typography","variant","appConfig","minWidth","maxWidth","minHeight","maxHeight","minMines","minFreeCells","viewportWidth","viewportHeight","autoCloseMenuAfterStart","autoCloseMenuOnSupermanToggle","fontSizeToCellRatio","messageTimeout","minimapSize","panelWidth","drawerWidth","cellSize","cellFontSize","edgeBorder","nonEdgeBorder","width","formRow","padding","state","newGame","gameInfo","height","mines","config","maxMines","validWidth","validHeight","validMines","changeParameter","e","key","value","target","id","parseInt","startGame","TextField","label","fullWidth","inputProps","min","max","error","onChange","onSubmit","Button","disabled","list","listItem","listItemText","drawer","open","ui","showMenu","superman","currentGame","hideMenu","event","toggleSuperman","supermanCheckboxIcon","Drawer","anchor","onClose","List","ListItem","ListItemText","ListItemSecondaryAction","button","textAlign","right","top","message","useEffect","setTimeout","Alert","AlertTitle","props","size","boxSizing","margin","display","justifyContent","alignItems","fontSize","mineDetected","background","palette","primary","light","opened","closed","border","icon","1","2","3","4","5","6","7","8","Cell","revealMine","cell","showFlagOnMine","onOpen","onFlag","resClasses","isOpened","hasMine","push","minesAround","revealMines","Icon","src","alt","isFlagged","calculateContent","Paper","join","createOpenCell","flagged","shiftKey","createClosedCell","flexDirection","borderWidth","borderStyle","borderTopColor","borderBottomColor","bottom","borderLeftColor","left","borderRightColor","column","viewport","columns","handleFlag","handleOpen","filter","x","offset","map","cells","y","fieldX","fieldY","buildColumns","overflow","toCssPercent","info","fraction","Minimap","square","validViewportChange","targetX","targetY","panel","flex","stats","marginBottom","minimap","divider","buttons","gridColumnGap","gridRowGap","gridTemplateAreas","fieldWrapper","btnUp","gridArea","btnDown","btnLeft","btnRight","flagsSet","handleKeyPress","change","indexOf","code","document","addEventListener","removeEventListener","LOADING","CircularProgress","changeOffset","startIcon","buildPanel","component","buildStats","fieldBorder","buildFieldBorder","container","paddingTop","box","App","Box","Container","Boolean","window","location","hostname","match","selectCurrentGameInfo","selectCurrentGame","workerSaga","toggleFlagSaga","action","select","newField","cloneDeep","put","find","takeEvery","generateField","validGameInfo","mineCoordinates","m","getNeighborsCoordinates","n","length","buildField","amount","res","allCells","i","index","Math","floor","random","splice","getRandomCells","openCellsFrom","queue","maxQueueLen","c","shift","neighbors","neighbor","generateFieldSaga","changeOffsetSaga","newX","newY","openCellSaga","reduce","fieldSum","colSum","rootSaga","initialState","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","all","fork","run","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.1ed9de4a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mine.6561ee48.svg\";","export const actionType = {\r\n    TOGGLE_MENU: 'TOGGLE_MENU',\r\n    TOGGLE_SUPERMAN: 'TOGGLE_SUPERMAN',\r\n    SET_NEW_GAME_PARAMETER: 'SET_NEW_GAME_PARAMETER',\r\n    START_GAME: 'START_GAME',\r\n    TOGGLE_FLAG: 'TOGGLE_FLAG',\r\n    OPEN_CELL: 'OPEN_CELL',\r\n    MOVE_VIEWPORT: 'MOVE_VIEWPORT',\r\n    SET_MESSAGE: 'SET_MESSAGE',\r\n    SET_FIELD: 'SET_FIELD',\r\n    UPDATE_FLAG_COUNT: 'UPDATE_FLAG_COUNT',\r\n    SET_VIEWPORT_OFFSET: 'SET_VIEWPORT_OFFSET',\r\n    SET_GAME_STAGE: 'SET_GAME_STAGE',\r\n    SET_VIEWPORT_SIZE: 'SET_VIEWPORT_SIZE'\r\n}\r\n\r\nexport const gameStage = {\r\n    NOT_STARTED: 'NOT_STARTED',\r\n    STARTED: 'STARTED',\r\n    WON: 'WON',\r\n    LOST: 'LOST'\r\n}","import { actionType } from '../enums';\r\nimport { act } from 'react-test-renderer';\r\n\r\n// request to show or hide the menu\r\nexport const toggleMenu = (show) => ({\r\n    type: actionType.TOGGLE_MENU,\r\n    payload: { show }\r\n});\r\n\r\n// set superman mode to given value\r\nexport const toggleSuperman = (superman) => ({\r\n    type: actionType.TOGGLE_SUPERMAN,\r\n    payload: { superman }\r\n});\r\n\r\n// set new game parameter, which is 'width', 'height' or 'mines'\r\n// to given value, if valid\r\nexport const setNewGameParameter = (key, value) => ({\r\n    type: actionType.SET_NEW_GAME_PARAMETER,\r\n    payload: { key, value }\r\n});\r\n\r\n// request starting game\r\nexport const startGame = (gameInfo) => ({\r\n    type: actionType.START_GAME,\r\n    payload: { gameInfo }\r\n})\r\n\r\n// set or unset flag on given cell\r\nexport const toggleFlag = (x, y) => ({\r\n    type: actionType.TOGGLE_FLAG,\r\n    payload: { x, y }\r\n});\r\n\r\n// request opening a cell\r\nexport const openCell = (x, y) => ({\r\n    type: actionType.OPEN_CELL,\r\n    payload: { x, y }\r\n})\r\n\r\n// request to move the viewport to see different part of the field\r\nexport const moveViewport = (dx, dy) => ({\r\n    type: actionType.MOVE_VIEWPORT,\r\n    payload: { dx, dy }\r\n})\r\n\r\n// show/hide the alert with given data\r\nexport const setMessage = (visible, severity='info', title='', content='') => ({\r\n    type: actionType.SET_MESSAGE,\r\n    payload: { severity, visible, title, content }\r\n})\r\n\r\n// set the game field as a reflection\r\n// of user's actions\r\nexport const setField = (field) => ({\r\n    type: actionType.SET_FIELD,\r\n    payload: { field }\r\n})\r\n\r\n// increase flags count by given number\r\nexport const changeSetFlags = (delta) => ({\r\n    type: actionType.UPDATE_FLAG_COUNT,\r\n    payload: { delta }\r\n})\r\n\r\n// actually set the viewport offset\r\nexport const setViewportOffset = (offset) => ({\r\n    type: actionType.SET_VIEWPORT_OFFSET,\r\n    payload: { offset }\r\n})\r\n\r\n// move game to another stage\r\nexport const setGameStage = (stage) => ({\r\n    type: actionType.SET_GAME_STAGE,\r\n    payload: { stage }\r\n})\r\n\r\nexport const setViewportSize = (width, height) => ({\r\n    type: actionType.SET_VIEWPORT_SIZE,\r\n    payload: { width, height }\r\n})","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { AppBar, Toolbar, Typography, IconButton } from '@material-ui/core';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nimport * as actions from '../redux/actions'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1, \r\n    },\r\n    timer : {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    flagCounter: {\r\n        \r\n    },\r\n    flagIcon: {\r\n        color: 'rgb(252, 150, 40)'\r\n    }\r\n  }));\r\n\r\nfunction Navbar({ dispatch }) {\r\n    const classes = useStyles(); \r\n\r\n    const showMenu = () => {\r\n        dispatch(actions.toggleMenu(true));\r\n    }\r\n\r\n    return (\r\n        <AppBar position=\"static\">\r\n\r\n            <Toolbar>\r\n\r\n                <IconButton \r\n                    edge=\"start\" \r\n                    className={classes.menuButton} \r\n                    color=\"inherit\" \r\n                    aria-label=\"menu\"\r\n                    onClick={showMenu}>\r\n\r\n                    <MenuIcon />\r\n\r\n                </IconButton>\r\n\r\n                <Typography variant=\"h6\" className={classes.title}>\r\n                    Minesweeper\r\n                </Typography>\r\n            </Toolbar>\r\n\r\n        </AppBar>\r\n    )\r\n}\r\n\r\nexport default connect()(Navbar)","const appConfig = {\r\n\r\n    minWidth: 3,\r\n    maxWidth: 300,\r\n    minHeight: 3,\r\n    maxHeight: 300,\r\n    minMines: 1,\r\n    minFreeCells: 1,\r\n\r\n    viewportWidth: 10,\r\n    viewportHeight: 7,\r\n\r\n    autoCloseMenuAfterStart: true,\r\n    autoCloseMenuOnSupermanToggle: false,\r\n\r\n    fontSizeToCellRatio: 0.75,\r\n    messageTimeout : 5000,\r\n\r\n    minimapSize: '10rem',\r\n    panelWidth: '15rem',\r\n    drawerWidth: '20rem',\r\n    cellSize: '2.1rem',\r\n    cellFontSize: '1.1rem',\r\n\r\n    edgeBorder: '1px solid black',\r\n    nonEdgeBorder: '1px solid transparent'\r\n}\r\n\r\nexport default appConfig;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport { TextField, Button } from '@material-ui/core';\r\n\r\nimport * as actions from '../redux/actions';\r\nimport config from '../appconfig';\r\n\r\nconst useStyles = makeStyles((theme) => {\r\n    return {\r\n        root: {\r\n            width: '100%'\r\n        },\r\n        formRow: {\r\n            padding: theme.spacing(2)\r\n        }\r\n    }\r\n})\r\n\r\nfunction NewGame({ width, height, mines, dispatch }) {\r\n\r\n    const classes = useStyles();\r\n    \r\n    const { minWidth, maxWidth, minHeight, maxHeight, minMines, minFreeCells } = config;\r\n    \r\n    const maxMines = width * height - minFreeCells;\r\n    \r\n    // functions used to validate the new games parameters\r\n    \r\n    const validWidth    = () => width   >= minWidth   && width   <= maxWidth  ;\r\n    const validHeight   = () => height  >= minHeight  && height  <= maxHeight ;\r\n    const validMines    = () => mines   >=  minMines  && mines   <= maxMines  ;\r\n    \r\n    const anyError = () => !validWidth() || !validHeight() || !validMines();\r\n\r\n    const changeParameter = (e) => {\r\n        if (!!e.target.id && !!e.target.value) {\r\n            dispatch(actions.setNewGameParameter(e.target.id, parseInt(e.target.value)))\r\n        }\r\n    }\r\n\r\n    const startGame = (e) => {\r\n        if (config.autoCloseMenuAfterStart) {\r\n            dispatch(actions.toggleMenu(false));\r\n        }\r\n        \r\n        dispatch(actions.startGame({ width, height, mines }));\r\n    }\r\n    \r\n    return (\r\n\r\n        <form className={classes.root}>\r\n            <div className={classes.formRow}>\r\n\r\n                <TextField \r\n                    id='width' \r\n                    label='Width' \r\n                    type='number' \r\n                    value={width} \r\n                    fullWidth={true}\r\n                    inputProps={ {min: minWidth, max: maxWidth} }\r\n                    error={ !validWidth() }\r\n                    onChange={changeParameter}\r\n                />\r\n\r\n            </div>\r\n\r\n            <div className={classes.formRow}>\r\n\r\n                <TextField \r\n                    id=\"height\" \r\n                    label=\"Height\" \r\n                    type='number' \r\n                    value={height}\r\n                    fullWidth={true}\r\n                    inputProps={ {min: minHeight, max: maxHeight} }\r\n                    error={ !validHeight() }\r\n                    onChange={changeParameter}\r\n                />\r\n\r\n            </div>\r\n\r\n            <div className={classes.formRow}>\r\n\r\n                <TextField \r\n                    id=\"mines\" \r\n                    label=\"Mines\" \r\n                    type='number' \r\n                    value={mines}\r\n                    fullWidth={true}\r\n                    inputProps={ {min: minMines, max: maxMines} }\r\n                    error={ !validMines() }\r\n                    onChange={changeParameter}\r\n                />\r\n\r\n            </div>\r\n\r\n            <div className={classes.formRow} onSubmit={startGame}>\r\n\r\n                <Button \r\n                    variant='contained'\r\n                    color='primary'\r\n                    fullWidth={true}\r\n                    onClick={startGame}\r\n                    disabled={ anyError() }\r\n                    >\r\n                        \r\n                        Start\r\n                        \r\n                </Button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        ...state.newGame.gameInfo\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(NewGame)\r\n","import React from 'react';\r\nimport { Drawer, makeStyles, List, ListItem, IconButton, ListItemSecondaryAction, ListItemText } from '@material-ui/core';\r\n\r\nimport NewGame from './NewGame';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../redux/actions';\r\nimport ChevronLeftRoundedIcon from '@material-ui/icons/ChevronLeftRounded';\r\nimport CheckBoxOutlineBlankRoundedIcon from '@material-ui/icons/CheckBoxOutlineBlankRounded';\r\nimport CheckBoxRoundedIcon from '@material-ui/icons/CheckBoxRounded';\r\nimport config from '../appconfig';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        \r\n    },\r\n    list: {\r\n    },\r\n    listItem: {\r\n        minWidth: config.drawerWidth,\r\n    },\r\n    listItemText: {\r\n        padding: theme.spacing(2)\r\n    },\r\n    drawer: {\r\n    }\r\n}));\r\n\r\nfunction Menu({ open, superman, dispatch }) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const hideMenu = (event) => {\r\n        dispatch(actions.toggleMenu(false));\r\n    }\r\n\r\n    const toggleSuperman = (event) => {\r\n        dispatch(actions.toggleSuperman(!superman));\r\n\r\n        if (config.autoCloseMenuOnSupermanToggle) {\r\n            dispatch(actions.toggleMenu(false));\r\n        }\r\n    }\r\n\r\n    const supermanCheckboxIcon = superman ? (\r\n        <CheckBoxRoundedIcon color='primary' />\r\n    ) : ( \r\n        <CheckBoxOutlineBlankRoundedIcon color='primary' /> \r\n    )\r\n    \r\n    return (\r\n\r\n        <div className={classes.root}>\r\n            <Drawer \r\n                className={classes.drawer}\r\n                anchor='left' \r\n                open={open}\r\n                variant='persistent'\r\n                onClose={hideMenu}\r\n                >\r\n\r\n                    <List className={classes.list}>\r\n\r\n                        <ListItem className={classes.listItem}>\r\n                            <ListItemText>&nbsp;</ListItemText>\r\n                            <ListItemSecondaryAction>\r\n                                <IconButton\r\n                                    edge='end'\r\n                                    onClick={hideMenu}\r\n                                    >\r\n                                        <ChevronLeftRoundedIcon />\r\n\r\n                                </IconButton>\r\n                            </ListItemSecondaryAction>\r\n                        </ListItem>\r\n\r\n                        <ListItem className={classes.listItem}>\r\n                            <NewGame />\r\n                        </ListItem>\r\n\r\n                        <ListItem button={true} onClick={toggleSuperman} className={classes.listItem}>\r\n                            <ListItemText className={classes.listItemText}>\r\n                                Superman\r\n                            </ListItemText>\r\n                            <ListItemSecondaryAction>\r\n                                <IconButton onClick={toggleSuperman}>\r\n                                    {supermanCheckboxIcon}\r\n                                </IconButton>\r\n                            </ListItemSecondaryAction>\r\n                        </ListItem>\r\n\r\n                    </List>\r\n\r\n            </Drawer>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => { \r\n    return { \r\n        open: state.ui.showMenu,\r\n        superman: state.currentGame.superman\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Menu);","import React, { useEffect } from 'react'\r\nimport { makeStyles } from '@material-ui/core'\r\nimport { connect } from 'react-redux';\r\nimport { Alert, AlertTitle } from '@material-ui/lab'\r\n\r\nimport config from '../appconfig';\r\nimport * as actions from '../redux/actions';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        textAlign: 'start',\r\n        position: 'absolute',\r\n        right: '0',\r\n        top: '0',\r\n        width: '20rem'\r\n    }\r\n}));\r\n\r\nfunction Message ({ severity, visible, title, content, dispatch }) {\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setTimeout(\r\n            () => {\r\n                if (visible) dispatch(actions.setMessage(false))\r\n            },\r\n            config.messageTimeout\r\n        );\r\n    })\r\n\r\n    if (!visible) return ' ';\r\n\r\n    // autohide the message after some time\r\n    \r\n\r\n    return (\r\n        <Alert\r\n            variant='filled'\r\n            className={classes.root}\r\n            severity={severity}>\r\n\r\n            <AlertTitle>{title}</AlertTitle>\r\n            {content}\r\n        </Alert>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => state.ui.message;\r\n\r\nexport default connect(mapStateToProps)(Message);","import React from 'react';\r\nimport { makeStyles, Icon, Paper, Button } from '@material-ui/core';\r\nimport FlagRoundedIcon from '@material-ui/icons/FlagRounded';\r\n\r\nimport Mine from '../assets/mine.svg';\r\nimport config from '../appconfig';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: props => props.size,\r\n        width: props => props.size,\r\n\r\n        boxSizing: 'border-box',\r\n        margin: theme.spacing(1),\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        minWidth: '0',\r\n        fontSize: config.cellFontSize,\r\n        padding: '0'\r\n    },\r\n    mineDetected: {\r\n        background: theme.palette.primary.light,\r\n    },\r\n    opened: {\r\n\r\n    },\r\n    closed: {\r\n        border: '1px solid transparent'\r\n    },\r\n    icon: {\r\n        height: config.cellSize,\r\n        width: config.cellSize,\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n\r\n    //classes for numbers\r\n\r\n    1: {\r\n        color: 'blue',\r\n    },\r\n    2: {\r\n        color: 'green',\r\n    },\r\n    3: {\r\n        color: 'red',\r\n    },\r\n    4: {\r\n        color: 'purple',\r\n    },\r\n    5: {\r\n        color: 'maroon'\r\n    },\r\n    6: {\r\n        color: 'turquoise'\r\n    },\r\n    7: {\r\n        color: 'black'\r\n    },\r\n    8: {\r\n        color: 'gray'\r\n    }\r\n\r\n}));\r\n\r\n\r\nfunction Cell({ \r\n    disabled, \r\n    revealMine, \r\n    cell, \r\n    superman, \r\n    size, \r\n    showFlagOnMine, \r\n    onOpen, \r\n    onFlag \r\n}) {\r\n    const classes = useStyles({ size });\r\n\r\n    // all the classes to apply to the cell\r\n    // regarding on its state\r\n    const resClasses = [\r\n        classes.root,\r\n        cell.isOpened ? classes.opened : classes.closed\r\n    ];\r\n\r\n    // add a background to cell if mine is\r\n    // detected in superman mode\r\n    if (superman && cell.hasMine && !revealMine) resClasses.push(classes.mineDetected);\r\n\r\n    // add a class depeneding on mines-around\r\n    // to color the number as in classic minesweeper\r\n    if (cell.isOpened && !cell.hasMine && cell.minesAround > 0) resClasses.push(classes[cell.minesAround]);\r\n\r\n    // cell content may be nothing, a mine image or \r\n    // a number of mines around, or flag icon\r\n    const content = calculateContent(cell, classes, revealMine, showFlagOnMine);\r\n\r\n    // if the cell is opened, show a paper element,\r\n    // otherwise a button\r\n    return cell.isOpened\r\n        ? createOpenCell(resClasses, content)\r\n        : createClosedCell({ resClasses, content, disabled, flagged: cell.isFlagged, onOpen, onFlag })\r\n}\r\n\r\nfunction calculateContent(cell, classes, revealMines, showFlagOnMine) {\r\n\r\n    // show mine icon if the cell has one and it is either open \r\n    // or the game has ended and all mines are revealed\r\n\r\n    if (cell.hasMine && (cell.isOpened || revealMines)) {\r\n        return (\r\n            <Icon className={classes.icon}>\r\n                <img src='https://alexkashcheyev.github.io/wix-minesweeper/static/media/mine.6561ee48.svg' height='100%' width='100%' alt='mine' />\r\n            </Icon>\r\n        )\r\n    }\r\n\r\n    // if a cell has no mine inside but at least one mine around,\r\n    // show the number\r\n\r\n    if (cell.isOpened && !cell.hasMine && cell.minesAround > 0) {\r\n        return cell.minesAround\r\n    }\r\n\r\n    // if a cell is closed and flagged, show flag icon\r\n    // also if the cell has a mine and the game is won\r\n\r\n    if (\r\n        (!cell.isOpened && cell.isFlagged)\r\n        ||\r\n        (cell.hasMine && showFlagOnMine)\r\n    ) {\r\n        return (\r\n            <FlagRoundedIcon className={classes.icon} color='secondary' />\r\n        )\r\n    }\r\n\r\n\r\n    // in all other cases, show nothing\r\n    return ' ';\r\n}\r\n\r\nfunction createOpenCell(resClasses, content) {\r\n\r\n    return (\r\n        <Paper\r\n            variant='outlined'\r\n            className={resClasses.join(' ')}\r\n        >\r\n\r\n            {content}\r\n        </Paper>\r\n    );\r\n    \r\n}\r\n\r\nfunction createClosedCell({ resClasses, content, disabled, flagged, onOpen, onFlag }) {\r\n\r\n    const handleClick = (e) => {\r\n        if (e.shiftKey) {\r\n            onFlag()\r\n        } else if (!flagged) {\r\n            onOpen()\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <Button\r\n            disabled={disabled}\r\n            className={resClasses.join(' ')}\r\n            variant='contained'\r\n            onClick={handleClick}\r\n        >\r\n            {content}\r\n        </Button>\r\n    )\r\n}\r\n\r\n\r\nexport default Cell;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nimport Cell from './Cell'\r\nimport { gameStage } from '../enums';\r\nimport * as actions from '../redux/actions';\r\nimport config from '../appconfig';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        borderWidth: '1px',\r\n        borderStyle: 'solid',\r\n        borderTopColor      : props => props.border.top     ? theme.palette.primary.light : 'transparent',\r\n        borderBottomColor   : props => props.border.bottom  ? theme.palette.primary.light : 'transparent',\r\n        borderLeftColor     : props => props.border.left    ? theme.palette.primary.light : 'transparent',\r\n        borderRightColor    : props => props.border.right   ? theme.palette.primary.light : 'transparent'\r\n    },\r\n    column: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center'\r\n    }\r\n}));\r\n\r\nfunction buildColumns({ field, gameInfo, viewport, classes, superman, stage, handleFlag, handleOpen }) {\r\n    return field\r\n    \r\n        // filter only visible columns\r\n        .filter(\r\n            (column, x) =>\r\n                gameInfo.width <= viewport.width\r\n                || (\r\n                    x >= viewport.offset.x\r\n                    && x < viewport.offset.x + viewport.width\r\n                )\r\n        ).map((column, x) => {\r\n\r\n            const cells = column.filter(\r\n                    // filter only visible cells\r\n\r\n                    (cell, y) =>\r\n                        gameInfo.height <= viewport.height\r\n                        || (\r\n                            y >= viewport.offset.y\r\n                            && y < viewport.offset.y + viewport.height\r\n                        )\r\n                ).map((cell, y) => {\r\n\r\n                    // x and y here are relative to the viewport,\r\n                    // not to the actual field\r\n\r\n                    const fieldX = x + viewport.offset.x;\r\n                    const fieldY = y + viewport.offset.y;\r\n\r\n                    // a unique key for reactjs\r\n                    const key = fieldX + '_' + fieldY;\r\n                    \r\n                    return (\r\n                        <Cell\r\n                            className={classes.cell}\r\n                            key={key}\r\n                            cell={cell}\r\n                            superman={superman}\r\n                            size={config.cellSize}\r\n                            revealMine={stage === gameStage.LOST}\r\n                            showFlagOnMine={stage === gameStage.WON}\r\n                            disabled={stage === gameStage.LOST || stage === gameStage.WON}\r\n                            onFlag={() => handleFlag(fieldX, fieldY)}\r\n                            onOpen={() => handleOpen(fieldX, fieldY)}\r\n                        />\r\n                    )\r\n                });\r\n\r\n            return (\r\n                <div className={classes.column} key={x}>\r\n                    {cells}\r\n                </div>\r\n            );\r\n        })\r\n}\r\n\r\nfunction GameField({ field, dispatch, superman, gameInfo, viewport, stage, border }) {\r\n    \r\n    const classes = useStyles({ border });\r\n\r\n    function handleFlag(x, y) {\r\n        dispatch(actions.toggleFlag(x, y));\r\n    }\r\n\r\n    function handleOpen(x, y) {\r\n        dispatch(actions.openCell(x, y));\r\n    }\r\n\r\n    const columns = buildColumns({ field, gameInfo, viewport, classes, superman, stage, handleFlag, handleOpen });\r\n\r\n    return (\r\n        <div className={classes.root} >\r\n            {columns}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n    return state.currentGame;\r\n}\r\n\r\nexport default connect(mapStateToProps)(GameField)","import React from 'react';\r\nimport { makeStyles, Paper } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        border: '1px solid #ccc',\r\n        position: 'relative',\r\n        overflow: 'hidden',\r\n\r\n        // root element width will be 100% if the field is horizontal\r\n        // or will be calculated proportionally to the height otherwise.\r\n        width: (props) => props.gameInfo.width >= props.gameInfo.height \r\n                    ? '100%'\r\n                    : toCssPercent(props.gameInfo.width / props.gameInfo.height),\r\n\r\n        // same goes for height if the field is vertical\r\n\r\n        height: (props) => props.gameInfo.height >= props.gameInfo.width\r\n                    ? '100%'\r\n                    : toCssPercent(props.gameInfo.height / props.gameInfo.width)\r\n    },\r\n    viewport: {\r\n        background: theme.palette.info.light,\r\n        position: 'absolute',\r\n\r\n        // vieport width, height and coordinates are calculated \r\n        // proportionally to field width and height\r\n\r\n        width:      (props) => toCssPercent(props.viewport.width / props.gameInfo.width),\r\n        height:     (props) => toCssPercent(props.viewport.height / props.gameInfo.height),\r\n\r\n        left:       (props) => toCssPercent(props.viewport.offset.x / props.gameInfo.width),\r\n        top:        (props) => toCssPercent(props.viewport.offset.y / props.gameInfo.height)\r\n    }\r\n}))\r\n\r\nfunction toCssPercent(fraction) {\r\n    return fraction * 100 + '%';\r\n}\r\n\r\nfunction Minimap(props) {\r\n\r\n    const classes = useStyles(props);\r\n\r\n    return (\r\n        <Paper \r\n            variant='outlined'\r\n            square={true}\r\n            className={classes.root}>\r\n\r\n            <div className={classes.viewport}>\r\n                &nbsp;\r\n            </div>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default Minimap;","\r\nexport function validViewportChange(viewport, gameInfo, dx, dy) {\r\n    \r\n    // if horizontal change requested\r\n    if (dx !== 0) {\r\n\r\n        // if the fields fits into the viewport, \r\n        // change should not be accepted\r\n        if (viewport.width >= gameInfo.width) return false;\r\n\r\n        // otherwise, check if we won't get over the\r\n        // borders of the field\r\n\r\n        const targetX = viewport.offset.x + dx;\r\n\r\n        if (\r\n            targetX < 0 \r\n            || targetX + viewport.width > gameInfo.width\r\n        ) {\r\n            return false;\r\n        } \r\n    }\r\n\r\n    // if vertical change requested, do the same\r\n    if (dy !== 0) {\r\n\r\n        if (viewport.height >= gameInfo.height) return false;\r\n\r\n        const targetY = viewport.offset.y + dy;\r\n\r\n        if (\r\n            targetY < 0\r\n            || targetY + viewport.height > gameInfo.height\r\n        ) {\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    return true;\r\n}","import React, { useEffect } from 'react';\r\nimport { makeStyles, Button, Typography, Paper, CircularProgress } from '@material-ui/core';\r\n\r\nimport KeyboardArrowUpRoundedIcon from '@material-ui/icons/KeyboardArrowUpRounded';\r\nimport KeyboardArrowLeftRoundedIcon from '@material-ui/icons/KeyboardArrowLeftRounded';\r\nimport KeyboardArrowDownRoundedIcon from '@material-ui/icons/KeyboardArrowDownRounded';\r\nimport KeyboardArrowRightRoundedIcon from '@material-ui/icons/KeyboardArrowRightRounded';\r\nimport FlagRoundedIcon from '@material-ui/icons/FlagRounded';\r\n\r\nimport GameField from './GameField';\r\nimport Minimap from './Minimap'\r\nimport { connect } from 'react-redux';\r\nimport { gameStage } from '../enums';\r\nimport * as actions from '../redux/actions';\r\nimport { validViewportChange } from '../shared/viewport.helpers';\r\nimport config from '../appconfig';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'row'\r\n    },\r\n    panel : {\r\n        margin: theme.spacing(1),\r\n        flex: '0',\r\n        alignItems: 'center',\r\n        minWidth: config.panelWidth,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        padding: theme.spacing(1)\r\n    },\r\n    stats: {\r\n        marginBottom: theme.spacing(2)\r\n    },\r\n    minimap: {\r\n        height: config.minimapSize,\r\n        width: config.minimapSize,\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        flexDirection: 'column'\r\n    },\r\n    divider: {\r\n        flex: '1'\r\n    },\r\n    buttons: {\r\n        display: 'grid',\r\n        gridColumnGap: theme.spacing(1),\r\n        gridRowGap: theme.spacing(1),\r\n        gridTemplateAreas: ' \". U .\" \"L D R\" '\r\n    },\r\n    fieldWrapper: {\r\n\r\n    },\r\n    btnUp: {\r\n        gridArea: 'U'\r\n    },\r\n    btnDown: {\r\n        gridArea: 'D'\r\n    },\r\n    btnLeft: {\r\n        gridArea: 'L'\r\n    },\r\n    btnRight: {\r\n        gridArea: 'R'\r\n    }\r\n}));\r\n\r\n\r\nfunction Viewport({ dispatch, viewport, gameInfo, stage, flagsSet }) {\r\n    \r\n    const classes = useStyles();\r\n\r\n    \r\n    const changeOffset = (dx, dy) => {\r\n        dispatch(actions.moveViewport(dx, dy));\r\n    }\r\n\r\n    useEffect(() => {\r\n        const handleKeyPress = (e) => {\r\n            setTimeout(() => {\r\n                let change = false;\r\n    \r\n                if (['KeyW', 'ArrowUp'].indexOf(e.code) >= 0) {\r\n                    change = { dx: 0, dy: -1 }\r\n                } else if (['KeyS', 'ArrowDown'].indexOf(e.code) >= 0) {\r\n                    change = { dx: 0, dy: 1 }\r\n                } else if (['KeyA', 'ArrowLeft'].indexOf(e.code) >= 0) {\r\n                    change = { dx: -1, dy: 0 }\r\n                } else if (['KeyD', 'ArrowRight'].indexOf(e.code) >= 0) {\r\n                    change = { dx: 1, dy: 0 }\r\n                }\r\n    \r\n                if (change) {\r\n                    dispatch(actions.moveViewport(change.dx, change.dy))\r\n                }\r\n            })\r\n        }\r\n\r\n\r\n        document.addEventListener('keyup', handleKeyPress);\r\n        return () => {\r\n            document.removeEventListener('keyup', handleKeyPress);\r\n        }\r\n    });\r\n\r\n    if (stage === gameStage.NOT_STARTED) {\r\n        return (\r\n            <Typography variant='h4'>\r\n                To start the game, click on the hamburger menu in the left upper corner, enter the desired parameters and click \"Start\" button.\r\n            </Typography>\r\n        ) \r\n    }\r\n\r\n    if (stage === gameStage.LOADING) {\r\n        return (\r\n            <CircularProgress />\r\n        )\r\n    }\r\n    \r\n    \r\n\r\n    const stats = buildStats({classes, gameInfo, flagsSet})\r\n\r\n    let panel = buildPanel({ stats, viewport, gameInfo, classes, changeOffset }) ;\r\n\r\n    const fieldBorder = buildFieldBorder({ viewport, gameInfo });\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            {panel}\r\n            <div className={classes.fieldWrapper}>\r\n                <GameField className={classes.field} border={fieldBorder} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction buildStats({ classes, gameInfo, flagsSet }) {\r\n    return (\r\n        <div className={classes.stats}>\r\n            <Typography color='secondary' variant='h4' component='div'>\r\n                <FlagRoundedIcon /> &times; {gameInfo.mines - flagsSet}\r\n            </Typography>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction buildPanel({ stats, viewport, gameInfo, classes, changeOffset}) {\r\n\r\n    if (viewport.height < gameInfo.height || viewport.width < gameInfo.width) {\r\n        // panel with minimap and control keys in case scrolling is enabled\r\n        \r\n        let key = 0;\r\n\r\n        return (\r\n            <Paper\r\n                variant='outlined'\r\n                className={classes.panel}>\r\n\r\n                {stats}\r\n                <div className={classes.minimap}>\r\n                    <Minimap\r\n                        gameInfo={gameInfo}\r\n                        viewport={viewport} />\r\n                    <Typography variant='caption'>Minimap</Typography>\r\n                </div>\r\n                <div className={classes.divider}>\r\n                    &nbsp;\r\n                    </div>\r\n                <div className={classes.buttons}>\r\n                    <Button\r\n                        key={key++}\r\n                        variant='contained'\r\n                        className={classes.btnUp}\r\n                        disabled={!validViewportChange(viewport, gameInfo, 0, -1)}\r\n                        startIcon={<KeyboardArrowUpRoundedIcon />}\r\n                        onClick={() => changeOffset(0, -1)}>\r\n\r\n                        W\r\n                        </Button>\r\n                    <Button\r\n                        key={key++}\r\n                        variant='contained'\r\n                        className={classes.btnDown}\r\n                        disabled={!validViewportChange(viewport, gameInfo, 0, 1)}\r\n                        startIcon={<KeyboardArrowDownRoundedIcon />}\r\n                        onClick={() => changeOffset(0, 1)}>\r\n\r\n                        S\r\n                        </Button>\r\n                    <Button\r\n                        key={key++}\r\n                        variant='contained'\r\n                        className={classes.btnLeft}\r\n                        disabled={!validViewportChange(viewport, gameInfo, -1, 0)}\r\n                        startIcon={<KeyboardArrowLeftRoundedIcon />}\r\n                        onClick={() => changeOffset(-1, 0)}>\r\n\r\n                        A\r\n                        </Button>\r\n                    <Button\r\n                        key={key++}\r\n                        variant='contained'\r\n                        className={classes.btnRight}\r\n                        disabled={!validViewportChange(viewport, gameInfo, 1, 0)}\r\n                        startIcon={<KeyboardArrowRightRoundedIcon />}\r\n                        onClick={() => changeOffset(1, 0)}>\r\n                        D\r\n                        </Button>\r\n                </div>\r\n            </Paper>\r\n        )\r\n    } else {\r\n\r\n        // panel with flag number only\r\n        \r\n        return (\r\n            <Paper className={classes.panel} variant='outlined'>\r\n                {stats}\r\n            </Paper>\r\n        )\r\n    }\r\n}\r\n\r\nfunction buildFieldBorder({ viewport, gameInfo }) {\r\n    return {\r\n        top: viewport.height >= gameInfo.height || !validViewportChange(viewport, gameInfo, 0, -1),\r\n        bottom  : viewport.height >= gameInfo.height || !validViewportChange(viewport, gameInfo, 0, 1),\r\n        left    : viewport.width >= gameInfo.width || !validViewportChange(viewport, gameInfo, -1, 0),\r\n        right   : viewport.width >= gameInfo.width || !validViewportChange(viewport, gameInfo, 1, 0)\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => state.currentGame;\r\n\r\nexport default connect(mapStateToProps)(Viewport);","import React from 'react';\r\nimport { Box, Container, makeStyles } from '@material-ui/core';\r\n\r\nimport Navbar from './components/Navbar';\r\nimport Menu from './components/Menu';\r\nimport Message from './components/Message';\r\nimport Viewport from './components/Viewport';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center'\r\n  },\r\n  box: {\r\n    position: 'relative'\r\n  }\r\n}));\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Navbar />\r\n      <Menu />\r\n      <Box className={classes.box}>\r\n        <Container className={classes.container}>\r\n          <Viewport />\r\n        </Container>\r\n        <Message />\r\n      </Box>\r\n    </div>\r\n  );\r\n}\r\n\r\n//<div>Icons made by <a href=\"https://www.flaticon.com/authors/bqlqn\" title=\"bqlqn\">bqlqn</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const selectCurrentGameInfo = (state) => state.currentGame.gameInfo;\r\n\r\nexport const selectCurrentGame = (state) => state.currentGame;\r\n\r\nexport const selectField = (state) => state.currentGame.field;","import { takeEvery, put, select } from 'redux-saga/effects';\r\nimport { gameStage, actionType } from '../enums';\r\nimport * as actions from '../redux/actions';\r\nimport { selectCurrentGame } from '../redux/selectors';\r\nimport { cloneDeep } from 'lodash';\r\n\r\nfunction* workerSaga(action) {\r\n    const { x, y } = action.payload;\r\n    const { field, flagsSet, gameInfo } = yield select(selectCurrentGame)\r\n\r\n    // Can't flag an opened cell\r\n    if (field[x][y].isOpened) return;\r\n\r\n    const newField = cloneDeep(field);\r\n\r\n    // Taking the flag off\r\n    if (field[x][y].isFlagged) {\r\n\r\n        newField[x][y].isFlagged = false;\r\n\r\n        yield put(actions.setField(newField));\r\n        yield put(actions.changeSetFlags(-1));\r\n\r\n        return;        \r\n    }\r\n\r\n    // Show message and do nothing if no flags left\r\n    if (flagsSet === gameInfo.mines) {\r\n        yield put(actions.setMessage(\r\n            true, \r\n            'warning',\r\n            'No flags left',\r\n            'You had just enough flags to flag all the mines.'\r\n        ))\r\n\r\n        return;\r\n    }\r\n\r\n    // At this point we filtered out the cases where we wouldn't \r\n    // actualy put a flag\r\n\r\n    newField[x][y].isFlagged = true;\r\n    \r\n    yield put(actions.setField(newField));\r\n\r\n    // and don't forget to increase set flags amount\r\n\r\n    yield put(actions.changeSetFlags(1));\r\n\r\n    // are all the mines flagged?\r\n    if (\r\n        // all the flags are set\r\n        flagsSet + 1 === gameInfo.mines\r\n\r\n        // and no flagged cells without mines exist\r\n        && !newField.find(\r\n            (column, x) => column.find(\r\n                (cell, y) => cell.isFlagged && !cell.hasMine\r\n            )\r\n        )\r\n    ) {\r\n        yield put(actions.setMessage(\r\n            true,\r\n            'success',\r\n            'You win!',\r\n            'Congratulations!'\r\n        ));\r\n        yield put(actions.setGameStage(gameStage.WON));\r\n    }\r\n}\r\n\r\n// watcher saga\r\nexport function* toggleFlagSaga() {\r\n    yield takeEvery(actionType.TOGGLE_FLAG, workerSaga)\r\n}\r\n\r\nexport default toggleFlagSaga;","import config from '../appconfig';\r\nimport { cloneDeep } from 'lodash';\r\n\r\n\r\nexport function generateField(gameInfo) {\r\n\r\n    // data validation\r\n    if (!validGameInfo(gameInfo)) {\r\n        return null;\r\n    }\r\n\r\n    // generate mines at random locations\r\n    const mineCoordinates = getRandomCells(gameInfo, gameInfo.mines);\r\n\r\n    // build an array reflecting the field\r\n    const field = buildField(gameInfo, mineCoordinates);\r\n\r\n    return field;\r\n}\r\n\r\nexport function openCellsFrom(x, y, field) {\r\n\r\n    const newField = cloneDeep(field);\r\n\r\n    // using BFS to open cells surrounding an empty cell\r\n    const queue = [{ x, y }];\r\n\r\n    let maxQueueLen = 0;\r\n\r\n    while (queue.length > 0) {\r\n        //console.log(queue.length, 'cells in queue');\r\n        maxQueueLen = Math.max(maxQueueLen, queue.length);\r\n\r\n        // take first cell from the queue\r\n        const c = queue.shift();\r\n\r\n        // ignore already opened cells and flagged cells\r\n        if (!newField[c.x][c.y].isOpened && !newField[c.x][c.y].isFlagged) {\r\n\r\n            // open the current cell\r\n            newField[c.x][c.y].isOpened = true;\r\n\r\n            // add its neighbours to the queue if there are\r\n            // no mines around\r\n            if (\r\n                newField[c.x][c.y].minesAround === 0\r\n            ) {\r\n                const neighbors = getNeighborsCoordinates(\r\n                    c.x, c.y,\r\n                    newField.length,\r\n                    newField[c.x].length\r\n                ).filter(\r\n                    // This filter duplicates the if, and removing it will not \r\n                    // change the functionality, but it reduces the maximum reached \r\n                    // queue length from 4773 to 2388 for a 300x300 field with 1 mine.\r\n                    // The \"if\" is still needed, because the cells still waiting in the \r\n                    // queue, can be already opened.\r\n                    n => !newField[n.x][n.y].isOpened\r\n                        && !newField[c.x][c.y].isFlagged\r\n                );\r\n\r\n                queue.push(...neighbors);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    //console.log('max queue length was', maxQueueLen)\r\n\r\n    return newField;\r\n}\r\n\r\nexport function countClosedCells(field) {\r\n\r\n    return field.reduce(\r\n        (fieldSum, column) => {\r\n            const fieldSumAddition = column.reduce(\r\n                (colSum, cell) => {\r\n                    const addition = (cell.isOpened ? 0 : 1);\r\n                    return colSum + addition;\r\n                },\r\n                0\r\n            )\r\n            return fieldSum + fieldSumAddition;\r\n        },\r\n        0\r\n    )\r\n\r\n}\r\n\r\nfunction validGameInfo({ width, height, mines }) {\r\n\r\n    const hasErrors = (width < config.minWidth)\r\n        || (width > config.maxWidth)\r\n        || (height < config.minHeight)\r\n        || (height > config.maxHeight)\r\n        || (mines < config.minMines)\r\n        || (mines > (width * height - config.minFreeCells));\r\n\r\n    return !hasErrors;\r\n\r\n}\r\n\r\nfunction getRandomCells({ height, width}, amount) {\r\n   \r\n    const res = [];\r\n    const allCells = [];\r\n    \r\n    // generate an aray of all possible coordinates of given field\r\n    for (let x = 0; x < width; x++) {\r\n        for (let y = 0; y < height; y++) {\r\n            allCells.push({x,y});\r\n        }\r\n    }\r\n\r\n    // get requested amount of coordinates by random index\r\n    for (let i = 0; i < amount; i++) {\r\n        const index = Math.floor(Math.random() * allCells.length);\r\n\r\n        // removing the element at random index\r\n        // the result of splice is an array\r\n        const cell = allCells.splice(index, 1);\r\n        res.push(...cell)\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\nfunction getNeighborsCoordinates(x, y, width, height) {\r\n\r\n    return [\r\n\r\n        { x: -1, y: -1 }, { x: 0, y: -1 }, { x: 1, y: -1 },\r\n\r\n        { x: -1, y:  0 }, /*   target   */ { x: 1, y:  0 },\r\n\r\n        { x: -1, y:  1 }, { x: 0, y:  1 }, { x: 1, y:  1 }\r\n\r\n    ].map(\r\n        delta => ({ x: x + delta.x, y: y + delta.y })\r\n    ).filter(\r\n        neighbor => neighbor.x >= 0 && neighbor.x < width\r\n            && neighbor.y >= 0 && neighbor.y < height\r\n    );\r\n\r\n}\r\n\r\nfunction buildField({ width, height }, mineCoordinates) {\r\n    const field = [];\r\n\r\n    // create a 2d array filled with empty cells\r\n    for (let x = 0; x < width; x++) {\r\n        field[x] = [];\r\n        for (let y = 0; y < height; y++) {\r\n            field[x][y] = {\r\n                isFlagged: false,\r\n                isOpened: false,\r\n                hasMine: false,\r\n                minesAround: null\r\n            }\r\n        }\r\n    }\r\n\r\n    // plant the mines\r\n    for (let m of mineCoordinates) {\r\n        field[m.x][m.y].hasMine = true;\r\n    }\r\n\r\n    // calculate the numbers of mines around each cell\r\n    for (let x = 0; x < width; x++) {\r\n        for (let y = 0; y < height; y++) {\r\n            \r\n            // if the cell has mine inside, don't calculate\r\n            if (!field[x][y].hasMine) {\r\n\r\n                const minesAround = getNeighborsCoordinates(x, y, width, height)\r\n                    .filter(n => field[n.x][n.y].hasMine)\r\n                    .length;\r\n\r\n                field[x][y].minesAround = minesAround;\r\n            }\r\n        }\r\n    }\r\n\r\n    return field;\r\n}\r\n","import { takeEvery, put, select } from 'redux-saga/effects';\r\nimport { actionType, gameStage } from '../enums';\r\nimport * as actions from '../redux/actions'\r\nimport { selectCurrentGameInfo } from '../redux/selectors';\r\nimport { generateField } from '../shared/field.helpers';\r\n\r\nfunction* workerSaga() {\r\n    const gameInfo = yield select(selectCurrentGameInfo);\r\n\r\n    const field = generateField(gameInfo);\r\n\r\n    yield put(actions.setField(field))\r\n    yield put(actions.setGameStage(gameStage.STARTED))\r\n    \r\n    return;\r\n}\r\n\r\n// watcher saga\r\nexport function* generateFieldSaga() {\r\n    yield takeEvery(actionType.START_GAME, workerSaga)\r\n}\r\n\r\nexport default generateFieldSaga;","import { takeEvery, put, select } from 'redux-saga/effects';\r\nimport { actionType } from '../enums';\r\nimport * as actions from '../redux/actions';\r\nimport { selectCurrentGame } from '../redux/selectors';\r\nimport { validViewportChange } from '../shared/viewport.helpers';\r\n\r\nfunction* workerSaga(action) {\r\n    // move over the field if it's bigger than the viewport\r\n\r\n    const currentGame = yield select(selectCurrentGame);\r\n\r\n    if (\r\n        validViewportChange(\r\n            currentGame.viewport, \r\n            currentGame.gameInfo, \r\n            action.payload.dx, \r\n            action.payload.dy\r\n        )\r\n    ) {\r\n        const newX = currentGame.viewport.offset.x + action.payload.dx;\r\n        const newY = currentGame.viewport.offset.y + action.payload.dy;\r\n\r\n        yield put(actions.setViewportOffset({x: newX, y: newY}));\r\n    }\r\n}\r\n\r\n// watcher saga\r\nfunction* changeOffsetSaga() {\r\n    yield takeEvery(actionType.MOVE_VIEWPORT, workerSaga);\r\n}\r\n\r\nexport default changeOffsetSaga;","import { takeEvery, put, select } from 'redux-saga/effects';\r\n\r\nimport { actionType, gameStage } from '../enums';\r\nimport * as actions from '../redux/actions'\r\nimport { openCellsFrom, countClosedCells } from '../shared/field.helpers';\r\nimport { selectCurrentGame } from '../redux/selectors';\r\n\r\nfunction* workerSaga(action) {\r\n    const { x, y } = action.payload;\r\n\r\n    const currentGame = yield select(selectCurrentGame);\r\n\r\n    // if the cell being opened has mine,\r\n    // the game is over\r\n    if (currentGame.field[x][y].hasMine) {\r\n        yield put(actions.setGameStage(gameStage.LOST));\r\n        yield put(actions.setMessage(true, 'warning', 'You lost!', 'Maybe you will be luckier next time.'));\r\n\r\n        return\r\n    }\r\n \r\n    // recursively open the cells starting from the given one\r\n    const newField = openCellsFrom(x, y, currentGame.field);\r\n    \r\n    // if all closed (flagged or not) cells have mines\r\n    // autoflag them and count as win\r\n    // Or, if amount of closed cells equals number of planted mines\r\n    const closedRemaining = countClosedCells(newField);\r\n\r\n    if (\r\n        closedRemaining === currentGame.gameInfo.mines\r\n    ) {\r\n        yield put(actions.setMessage(true, 'success', 'You won!', 'You opened all the safe cells, that counts as win!'))\r\n        yield put(actions.setGameStage(gameStage.WON));\r\n    }\r\n\r\n    yield put(actions.setField(newField));\r\n}\r\n\r\n\r\n// watcher saga\r\nfunction* openCellSaga() {\r\n    yield takeEvery(actionType.OPEN_CELL, workerSaga)\r\n}\r\n\r\nexport default openCellSaga;","import { createStore, applyMiddleware } from 'redux';\r\nimport { gameStage, actionType } from '../enums';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport toggleFlagSaga from '../sagas/toggleFlagSaga';\r\nimport generateFieldSaga from '../sagas/generateFieldSaga';\r\nimport changeOffsetSaga from '../sagas/changeOffsetSaga';\r\nimport openCellSaga from '../sagas/openCellSaga';\r\nimport { fork, all } from 'redux-saga/effects';\r\nimport config from '../appconfig';\r\n\r\nexport const initialState = {\r\n    ui: {\r\n        showMenu: false,\r\n        message: {\r\n            severity: 'info',\r\n            visible: false,\r\n            title: '',\r\n            content: ''\r\n        }\r\n    },\r\n    currentGame: {\r\n        gameInfo: {\r\n            width: 15,\r\n            height: 15,\r\n            mines: 10\r\n        },\r\n        viewport: {\r\n            width: config.viewportWidth,\r\n            height: config.viewportHeight,\r\n            offset: {\r\n                x: 0,\r\n                y: 0\r\n            },\r\n        },\r\n        stage: gameStage.NOT_STARTED,\r\n        superman: true,\r\n        flagsSet: 0,\r\n        field: []\r\n    },\r\n    newGame: {\r\n        gameInfo: {\r\n            width: 8,\r\n            height: 8,\r\n            mines: 10\r\n        }\r\n    }\r\n}\r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n        case actionType.TOGGLE_MENU:\r\n            return {\r\n                ...state,\r\n                ui: {\r\n                    ...state.ui,\r\n                    showMenu: action.payload.show\r\n                }\r\n            }\r\n\r\n        case actionType.TOGGLE_SUPERMAN:\r\n            return {\r\n                ...state,\r\n                currentGame: {\r\n                    ...state.currentGame,\r\n                    superman: action.payload.superman\r\n                }\r\n            }\r\n\r\n        case actionType.SET_NEW_GAME_PARAMETER:\r\n            return {\r\n                ...state,\r\n                newGame: {\r\n                    ...state.newGame,\r\n                    gameInfo: {\r\n                        ...state.newGame.gameInfo,\r\n                        [action.payload.key]: action.payload.value\r\n                    }\r\n                }\r\n            }\r\n\r\n        case actionType.START_GAME:\r\n            return {\r\n                ...state,\r\n                currentGame: {\r\n                    ...state.currentGame,\r\n                    ...action.payload,\r\n                    flagsSet: 0,\r\n                    stage: gameStage.LOADING,\r\n                    viewport: {\r\n                        ...state.currentGame.viewport,\r\n                        offset: {\r\n                            x: 0,\r\n                            y: 0\r\n                        }\r\n                    }\r\n                },\r\n            }\r\n\r\n        case actionType.SET_MESSAGE: {\r\n\r\n            return {\r\n                ...state,\r\n                ui: {\r\n                    ...state.ui,\r\n                    message: action.payload\r\n                }\r\n            }\r\n            \r\n        }\r\n\r\n        case actionType.SET_FIELD: {\r\n\r\n            return {\r\n                ...state,\r\n                currentGame: {\r\n                    ...state.currentGame,\r\n                    field: action.payload.field\r\n                }\r\n            }\r\n        }\r\n\r\n        case actionType.UPDATE_FLAG_COUNT: {\r\n            \r\n            return {\r\n                ...state,\r\n                currentGame: {\r\n                    ...state.currentGame,\r\n                    flagsSet: state.currentGame.flagsSet + action.payload.delta\r\n                }\r\n            }\r\n        }\r\n\r\n        case actionType.SET_VIEWPORT_OFFSET: {\r\n\r\n            return {\r\n                ...state,\r\n                currentGame: {\r\n                    ...state.currentGame,\r\n                    viewport: {\r\n                        ...state.currentGame.viewport,\r\n                        offset: action.payload.offset                        \r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        case actionType.SET_GAME_STAGE: {\r\n            return {\r\n                ...state,\r\n                currentGame: {\r\n                    ...state.currentGame,\r\n                    stage: action.payload.stage\r\n                }\r\n            }\r\n        }\r\n\r\n        case actionType.SET_VIEWPORT_SIZE: {\r\n            return {\r\n                ...state,\r\n                currentGame: {\r\n                    ...state.currentGame,\r\n                    viewport: {\r\n                        ...state.currentGame.viewport,\r\n                        ...action.payload\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        default: return state;\r\n    }\r\n}\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nexport const store = createStore(\r\n    rootReducer, \r\n    applyMiddleware(sagaMiddleware)\r\n);\r\n\r\nfunction* rootSaga () {\r\n    yield all([\r\n        fork(toggleFlagSaga),\r\n        fork(generateFieldSaga),\r\n        fork(changeOffsetSaga),\r\n        fork(openCellSaga)\r\n    ]);\r\n}\r\n\r\nsagaMiddleware.run(rootSaga);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\nReactDOM.render(\n  (\n    <Provider store={store}>\n      <App />\n    </Provider>\n  ),\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}